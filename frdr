#!/usr/bin/env bash
##
## ███████ ██████  ██████  ██████
## ██      ██   ██ ██   ██ ██   ██
## █████   ██████  ██   ██ ██████
## ██      ██   ██ ██   ██ ██   ██
## ██      ██   ██ ██████  ██   ██
##
## RSS Feed Reader feat. fzf & jq

CONFIG_DIR=~/.config/frdr
FRDR_CONFIG_FILE=$CONFIG_DIR/config.bash
FRDR_CACHE_DIR=~/.cache/frdr

download_feeds() {
  load_config
  mkdir -p $FRDR_CACHE_DIR
  for alias in "${!FEEDS[@]}"; do
    url=${FEEDS[$alias]}
    feed_dir="$FRDR_CACHE_DIR/${alias// /_}"
    [[ ! -d $feed_dir ]] && mkdir "$feed_dir"

    # check if it's a local file
    if [[ -f $url ]]; then
      cat "$url"
    else # fetch feed
      wget -q -O- "$url"
    fi |
      rss2json |
      jq -c --arg alias "$alias" '. as $c | $c.items // $c.entries | .[] |
	   {
       title: (.title.value? // .title),
       timestamp: ((try(.pub_date | strptime("%a, %d %b %Y %T %Z") | mktime) // (.updated | fromdate)) | tostring),
       link: (.link // .id),
       guid: (.guid // .id // .link),
       content: ((.description // .content.value?) // .content),
	     channel_alias: $alias,
       channel: ($c.title.value? // $c.title),
       channel_link: ($c.link // $c.id),
	     channel_desc: $c.description,
	     read: 0
	   }' |
      while read -r obj; do
        hash=$(jq '.guid' <<<"$obj" | cksum)
        file="$feed_dir/${hash%% *}.json"
        [[ ! -f $file ]] && jq <<<"$obj" >"$file"
      done
  done
}

aggregate_items() {
  load_config
  for alias in "${!FEEDS[@]}"; do
    url=${FEEDS[$alias]}
    feed_dir="$FRDR_CACHE_DIR/${alias// /_}"
    read=${1:-0}
    for json in "$feed_dir"/*.json; do
      if [[ -f $json ]]; then
        out=()
        readarray -t out < <(jq -rc --arg read "$read" --arg json "$json" \
          'select((.read | tostring) == $read) |
          (.timestamp) + "\n" +
          ($json) + "\n" +
          (.link) + "\n" +
          (.channel_alias) + "\n" +
          (.title) + "\n"' \
          "$json")
        # shellcheck disable=SC2059
        [[ -v out[@] ]] &&
          printf "%s,%s,%s,${FRDR_POST_FMT:-%(%d %b %y %k:%M)T %-14s │ %s}\n" \
            "${out[0]}" "${out[1]}" "${out[2]}" \
            "${out[0]}" "${out[3]}" "${out[4]}"
      fi
    done
  done |
    sort -r -k1
}

aggregate_items_read() {
  aggregate_items 1
}

# $1: 1 for read, 0 for unread
# rest: files
# FIXME: return a code on success/failure to determine if aggregate_items needs
# to be called after marking
mark() {
  sed -ie "s/\"read\": $(($1 ^ 1))/\"read\": $1/" "${@:2}"
}

load_config() {
  declare -gA FEEDS=()
  # shellcheck disable=SC1090
  source "$FRDR_CONFIG_FILE"
}

#########################

[[ $1 == "-s" ]] && return # for sourcing

[[ ! -f $FRDR_CONFIG_FILE ]] &&
  echo "Please create $FRDR_CONFIG_FILE by copying the sample.config.bash"

load_config
download_feeds &
aggregate_items |
  fzf --layout=reverse \
    --multi \
    --ansi \
    --header="Feed Reader - Welcome!" \
    --header-first \
    --prompt="Search: " \
    --info=inline-right \
    --delimiter="," \
    --with-nth=4.. \
    --preview="jq -r '.content' {2} | ${FRDR_PREVIEWER:-less}" \
    --bind="${FRDR_REFRESH:-ctrl-r}:reload-sync(bash -c '. frdr -s; download_feeds; aggregate_items')" \
    --bind="${FRDR_SELECT_ALL:-ctrl-space}:toggle-all" \
    --bind="${FRDR_MARK:-ctrl-y}:reload(bash -c \". frdr -s; mark 1 {+2}; aggregate_items\")" \
    --bind="${FRDR_UNMARK:-ctrl-u}:reload(bash -c \". frdr -s; mark 0 {+2}; aggregate_items_read\")" \
    --bind="${FRDR_VIEW_UNREAD:-esc}:reload(bash -c '. frdr -s; aggregate_items')+transform-header(printf 'Feed Reader - Unread')" \
    --bind="${FRDR_VIEW_READ:-alt-h}:reload(bash -c '. frdr -s; aggregate_items_read')+transform-header(printf 'Feed Reader - Read')" \
    --bind="enter:execute(jq -r '.content' {2} | ${FRDR_PAGER:-less})+reload(bash -c \". frdr -s; mark 1 {2}; aggregate_items\")" \
    --bind="${FRDR_OPEN:-ctrl-o}:execute(xdg-open {3})+reload(bash -c \". frdr -s; mark 1 {2}; aggregate_items\")"

# FIXME: show read posts, hit ctrl-r on one => sends you back to unread posts
#        with wrong header
