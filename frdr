#!/usr/bin/env bash
##
## ███████ ██████  ██████  ██████
## ██      ██   ██ ██   ██ ██   ██
## █████   ██████  ██   ██ ██████
## ██      ██   ██ ██   ██ ██   ██
## ██      ██   ██ ██████  ██   ██
##
## RSS Feed Reader feat. fzf & jq

CONFIG_DIR=~/.config/frdr
FRDR_CONFIG_FILE=$CONFIG_DIR/config.bash
FRDR_CACHE_DIR=~/.cache/frdr
FRDR_REFRESH=ctrl-r
FRDR_MARK=ctrl-y
FRDR_UNMARK=ctrl-u
FRDR_VIEW_UNREAD=esc
FRDR_VIEW_READ=alt-h
FRDR_OPEN=ctrl-o
FRDR_SELECT_ALL=ctrl-space
FRDR_SHOW_HELP=true
FRDR_PORT=2122

load_config() {
  declare -gA FEEDS=()
  # shellcheck disable=SC1090
  source "$FRDR_CONFIG_FILE"
}

download_feeds() {
  load_config
  mkdir -p $FRDR_CACHE_DIR
  for alias in "${!FEEDS[@]}"; do
    url=${FEEDS[$alias]}
    feed_dir="$FRDR_CACHE_DIR/${alias// /_}"
    [[ ! -d $feed_dir ]] && mkdir -p "$feed_dir"/{unread,read}

    # check if it's a local file
    if [[ -f $url ]]; then
      cat "$url"
    else # fetch feed
      wget -q -O- "$url"
    fi |
      rss2json |
      jq -c --arg alias "$alias" '. as $c | $c.items // $c.entries | .[] |
	   {
       title: (.title.value? // .title),
       timestamp: ((try(.pub_date | strptime("%a, %d %b %Y %T %Z") | mktime) // (.updated | fromdate)) | tostring),
       link: (.link // .id),
       guid: (.guid // .id // .link),
       content: ((.description // .content.value?) // .content),
	     channel_alias: $alias,
       channel: ($c.title.value? // $c.title),
       channel_link: ($c.link // $c.id),
	     channel_desc: $c.description,
	     read: 0
	   }' |
      while read -r obj; do
        hash=$(jq '.guid' <<<"$obj" | cksum)
        filename=${hash%% *}.json
        [[ ! -f $feed_dir/read/$filename ]] && jq <<<"$obj" >"$feed_dir/unread/$filename"
      done && curl -XPOST localhost:"$FRDR_PORT" -d "reload(bash -c '. frdr -s; aggregate_items')" &
  done
}

aggregate_items() {
  load_config
  state=${1:-unread} # read/unread
  help_header "$state"
  for alias in "${!FEEDS[@]}"; do
    url=${FEEDS[$alias]}
    feed_dir="$FRDR_CACHE_DIR/${alias// /_}"
    for json in "$feed_dir/$state"/*.json; do
      if [[ -f $json ]]; then
        out=()
        readarray -t out < <(jq -rc --arg json "$json" \
          '(.timestamp) + "\n" +
          ($json) + "\n" +
          (.link) + "\n" +
          (.channel_alias) + "\n" +
          (.title) + "\n"' \
          "$json")
        # shellcheck disable=SC2059
        [[ -v out[@] ]] &&
          printf "%s,%s,%s,${FRDR_POST_FMT:-%(%d %b %y %k:%M)T %-14s │ %s}\n" \
            "${out[0]}" "${out[1]}" "${out[2]}" \
            "${out[0]}" "${out[3]}" "${out[4]}"
      fi
    done
  done |
    sort -r -k1
}

aggregate_items_read() {
  aggregate_items read
}

# $1: read / unread
# rest: files
# FIX: can this be done without a loop using expansions?
mark() {
  for f in "${@:2}"; do
    mv "$f" "$(dirname "$f")/../$1/"
  done
}

help_header() {
  [[ "$FRDR_SHOW_HELP" ]] &&
    printf ",,,%s: refresh, enter: read, %s: open link, " "$FRDR_REFRESH" "$FRDR_OPEN"
  if [[ "$1" == "unread" ]]; then
    printf "%s: mark read, %s: view read\n" \
      "$FRDR_MARK" \
      "$FRDR_VIEW_READ"
  elif [[ "$1" == "read" ]]; then
    printf "%s: mark unread, %s: view unread\n" \
      "$FRDR_UNMARK" \
      "$FRDR_VIEW_UNREAD"
  fi
}

#########################

[[ $1 == "-s" ]] && return # for sourcing

[[ ! -f $FRDR_CONFIG_FILE ]] &&
  echo "Please create $FRDR_CONFIG_FILE by copying the sample.config.bash" && exit 1

load_config
aggregate_items |
  fzf --layout=reverse \
    --multi \
    --ansi \
    --listen "$FRDR_PORT" \
    --header="Feed Reader - Welcome!" \
    --header-first \
    --header-lines=1 \
    --prompt="Search: " \
    --info=inline-right \
    --delimiter="," \
    --with-nth=4.. \
    --preview="jq -r '.content' {2} | ${FRDR_PREVIEWER:=less}" \
    --bind="start:unbind($FRDR_UNMARK)+execute(bash -c '. frdr -s; download_feeds')" \
    --bind="$FRDR_REFRESH:reload-sync(bash -c '. frdr -s; download_feeds; aggregate_items')" \
    --bind="$FRDR_SELECT_ALL:toggle-all" \
    --bind="$FRDR_MARK:reload(bash -c '. frdr -s; mark read {+2}; aggregate_items')" \
    --bind="$FRDR_UNMARK:reload(bash -c '. frdr -s; mark unread {+2}; aggregate_items_read')" \
    --bind="$FRDR_VIEW_UNREAD:unbind($FRDR_UNMARK)+reload(bash -c '. frdr -s; aggregate_items')+transform-header(printf 'Feed Reader - Unread')+rebind($FRDR_MARK,$FRDR_VIEW_READ)" \
    --bind="$FRDR_VIEW_READ:unbind($FRDR_MARK,$FRDR_VIEW_READ)+reload(bash -c '. frdr -s; aggregate_items_read')+transform-header(printf 'Feed Reader - Read')+rebind($FRDR_UNMARK,$FRDR_VIEW_UNREAD)" \
    --bind="enter:execute(jq -r '.content' {2} | ${FRDR_PAGER:=less})+reload(bash -c '. frdr -s; mark read {2}; aggregate_items')" \
    --bind="$FRDR_OPEN:execute(xdg-open {3})+reload(bash -c '. frdr -s; mark read {2}; aggregate_items')"
